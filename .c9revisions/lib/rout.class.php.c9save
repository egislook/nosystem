{"ts":1372422834961,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n    class rout extends main{\n        \n        public $VMcount = 1;\n        public $MAXobjects = 3;                                                 //min 1 object needed for collections\n        public $MAXcollections = 1;\n        public $requests = array('get');                                        //available requests\n        \n        public $request = 0;                                                    //request in url\n        public $data = 0;                                                       //object data in url\n        \n        public $collection = 0;\n        public $find = array();\n        public $collect = array();\n    \n        function __construct(){\n            parent::__construct();\n        \n            /*if($_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {\n                dump('ajax');\n            }\n            else\n                dump('neajax');*/\n                \n                \n            $url = $this->filterGet();\n            \n            if($url){\n                $this->sortUrlToData($url);\n                \n                if(isset($this->request) && is_array($this->data)){\n                    $collect = new collect($this->request, $this->data);\n                }\n            }\n        }\n        \n//validate get and return it\n        function filterGet(){\n            \n            if(isset($_GET['url'])){\n                $url = $_GET['url'];\n                $valid = (preg_match(\"/^[0-9a-zA-Z\\/\\,\\.\\:\\;]+$/\", $url)==1)?true:false;\n                if($valid){\n                    $this->msg(1, 'valid url', __METHOD__);\n                    return $_GET['url'];\n                }\n                else{\n                    $this->msg(0, 'invalid url', __METHOD__);\n                    return false;\n                }\n            }\n            else{\n                $this->msg(0, 'invalid url', __METHOD__);\n                return false;\n            }\n        }\n        \n//sort url to array\n        function sortUrlToData($url){\n            \n            \n            $url = explode(VM, $url);\n            $count = count($url);\n            if($count==($this->VMcount+1)){\n                foreach($this->requests as $val){\n                    if($val==$url[0]){\n                        //set to class public request\n                        $this->request = $url[0];\n                        $this->msg(1, 'valid url {request} structure' , __METHOD__);\n                        $objects = string::strExplode(';', $url[1], 3);\n                        if(is_array($objects) && count($objects)<=$this->MAXobjects){\n                            $data = $this->objToArray($objects);\n                            \n                            if(is_array($data)){\n                                if(count($data[0])<=$this->MAXcollections){\n                                    $this->data = $data;\n                                    $this->msg(1, 'valid url {data} object structure' , __METHOD__);\n                                }\n                                else\n                                    $this->msg(0, 'invalid url {data} selected collections number : '.$url[1], __METHOD__);\n                                //set to class public data\n                                \n                            }\n                            else\n                                $this->msg(0, 'invalid url {data} object structure : '.$url[1], __METHOD__);\n                        }\n                        else\n                            $this->msg(0, 'invalid url {data} object structure : '.$url[1].' or to much objects', __METHOD__);\n                        \n                    }\n                    else\n                        $this->msg(0, 'invalid url {request} : '.$url[0], __METHOD__);\n                }\n            }\n            else\n                $this->msg(0, 'cannot detect {value marker}', __METHOD__);\n            \n        }\n        \n//convert url object to array and return it        \n        function objToArray($obj){\n            foreach($obj as $key=> $val){\n                $data = string::strExplode(',', $val);\n                if(is_array($data)){\n                    foreach($data as $k => $v){\n                        $new = string::strExplode(':', $v);\n                        if(count($new)>1){\n                            $a = $new[0];\n                            unset($data[$k]);\n                            $data[$a] = $new[1];\n                        }\n                    }\n                    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ISIEXTRACTINK SMULKIAU KAP REIKIES\n                    $objects[$key] = $data;\n                }\n                else\n                    return 0;\n            }\n            return $objects;\n            \n        }\n    }"]],"start1":0,"start2":0,"length1":0,"length2":4738}]],"length":4738}
{"contributors":[],"silentsave":true,"ts":1372422848719,"patch":[[{"diffs":[[0,"();\n"],[-1,"        \n            /*if($_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {\n                dump('ajax');\n            }\n            else\n                dump('neajax');*/\n"],[0,"    "]],"start1":712,"start2":712,"length1":186,"length2":8}]],"length":4560,"saved":false}
{"ts":1372422851912,"patch":[[{"diffs":[[0,"       \n"],[-1,"                \n"],[0,"        "]],"start1":725,"start2":725,"length1":33,"length2":16}]],"length":4543,"saved":false}
